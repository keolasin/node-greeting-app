1. A Node module is basically a library of functions, usually created in such a way to manage a certain, specific problem or handling tasks related to a certain theme. They consist of functions to be included in the application.

2. ```exports``` differs from ```module.exports``` in that while both initially refer to the same, empty object, where we can then add methods to that object through direct assignment or replacing that empty object, ```exports``` is basically an alias to that object. However, module.exports essentially has the final assignment, and so if we wanted to export a certain value, say a string, solely that string object would be exported if we used module.exports. However, ```exports``` will allow us to use direct assignment, yet still retain the original functions assigned to exports/module.exports. Thus, when we ```require``` our module, it is actually importing the module.exports object, not a ```exports``` object, since ```exports``` is just an alias.

3. Using ```exports``` is recommended because it will avoid direct assignment problems, avoiding irresponsibly overwriting our module.exports object with a specific object type (say we add a string using ```module.exports = "some text"```, our exported object would now simply be the string object "some text", without retaining any previous properties/methods added to that object.
